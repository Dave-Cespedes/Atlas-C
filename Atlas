#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, I2C_1,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Sensor, I2C_2,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Sensor, I2C_3,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Sensor, I2C_4,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Motor,  port1,           BackLift1,     tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           LeftRear,      tmotorVex393HighSpeed_MC29, openLoop, driveLeft, encoderPort, I2C_1)
#pragma config(Motor,  port3,           RightRear,     tmotorVex393HighSpeed_MC29, openLoop, driveRight, encoderPort, I2C_2)
#pragma config(Motor,  port4,           RightFront,    tmotorVex393HighSpeed_MC29, openLoop, driveRight, encoderPort, I2C_3)
#pragma config(Motor,  port5,           LeftFront,     tmotorVex393HighSpeed_MC29, openLoop, driveLeft, encoderPort, I2C_4)
#pragma config(Motor,  port6,           LeftLifts,     tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           RightLifts,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,           Claw1, 	       tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,           Claw2,         tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port10,          BackLift2,     tmotorVex393_HBridge, openLoop)


#pragma platform(VEX2)
#pragma competitionControl(Competition)
#include "Vex_Competition_Includes.c"





// Set Value for words and phrases to use later
// Try not to change any values and if there are any specific ones add them using:// int [Name] = Value; //

  int FULL = 127; 	// Please only use this for the lifts.
  int HALF = 64;  	// Only necessary for testing speeds.
  int TILE = 500;   	// Theoretically accurate.
  int CONTROL = 5;	// Use this to maintain the lift.
  int LEFT = (Ch3); 	// These two settings are
  int RIGHT = (Ch2);	// for the controllers.
  int SPEED = 100;  	// The Theoretically proper speed for the four wheels. IDK IDK IDK IDK maybe

                       /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////  // If you changed or added anything other than Values (for example motor ports, adding int values, changing IMEs, etc.
  // MAJOR CHANGES //  // Then this would go here and please be sure to add it so nobody, Me(Efrain), gets confused
  ///////////////////  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /* 1/9/17 6:00am
  Efrain: I changed the motors and sensors setup to have two lift motor controls instead of the usual four.
  so the lifts are powered by four motors but are in only two ports to provide room for the back lift and reach
  the 12 motor limit no problem.

  1/9/17  6:35am
  Efrain: I added autonomous voids for my other fellow programmers

  1/9/17  7:00am
  Efrain: Instead of having so much garbage in the user control I changed the motors into a void to keep it clean.
  
  1/10/17 8:30am
  Efrain: I have fixed the robot to not have to use so much for the "Deploy()". That was due to me changing the intake 
  to the claw and haveing a small fork to fit in constraints. I have also made a second deploy command for a back-up. 
  
  1/10/17 4:30pm
  Efrain: I updated the Team auton sections so if you're a little rusty that's okay just write an auton you see fit. I'll 
  fix anything you might have errors in.
  
  1/11/17 8:00am
  Efrain: I added the claw functions into voids under the "User Fuctions" 


  */
void pre_auton()
{
  bStopTasksBetweenModes = true; //This is necessary
}

//This section is for the Vex speaker module so only me(Efrain) and Jan can use it.
//Add Bool to use the right sounds an only once, also please don't use while loops if possible.
void beep()
{
	bPlaySounds = true;

	playSound(soundBeepBeep);

}
///////////////////
//---------------//
//  Autononmous  //
//  Functions    //
//---------------//
///////////////////

void Deploy1() //This will shake the bot to drop the fork.
							//It would most likely be used all the time.
{
	startMotor(LeftRear,-SPEED);
	startMotor(RightRear,-SPEED);
	startMotor(LeftLifts,FULL);
	startMotor(RightLifts,FULL);
	wait(0.5);
	stopMotor(LeftRear);
	stopMotor(RightRear);
	stopMotor(LeftLifts);
	stopMotor(RightLifts);
}


void Deploy2 ()
   /* This will just slightly shake the bot so the fork will fall to the floor, Theoretically it houldn't need 
		*/ too much to drop it 
{
	startMotor(LeftRear,-SPEED);
	startMotor(RightRear,-SPEED);
	wait(0.3);
	stopMotor(LeftRear);
	stopMotor(RightRear);

}


void LiftAll()// Activate the lift to full power... if you couldn't tell.
{
		startMotor(LeftLifts,FULL);
		startMotor(RightLifts,FULL);

}

void stopLift()// Stops the lift from lifting in any way... again if you couldn't already tell.
{
        stopMotor(LeftLifts);
		stopMotor(RightLifts);

}
void dropLiftFullSpeed()// Will drop the lift at full negative speed down.
{
		startMotor(LeftLifts,-FULL);
		startMotor(RightLifts,-FULL);
}
///////////////////////////
//UNOFFICIAL  AUTONOMOUS'//
//Write your autons here.//
///////////////////////////


/*----------------------------------------------------------------------------------------------------------------------------------------//
// TEAM AUTONS																																																														//
// Also I am very sorry I took control of all the programming this entire year but I really believe you all have untapped potential,				//
// so please program as you see fit. I really want to include you guys on the team. Thank you for everything.															//
// P.S If you don't know how to use the voids I made then ignore them they are basically just folders in the programming you can always		//
// refer to. 	
//
//
//	Here is a sample auton you can always refer to if your a little lost. It's very basic. I just learned how to make it not basic.
//
//	//Begin Auton.
//    startMotor(RightWheel,110);
//    startMotor(LeftWheel,110);
//    //Lift will begin at the same time as the drive.
//    startMotor(RightUpLift,100);
//    startMotor(RightDownLift,100);
//    startMotor(LeftUpLift,100);
//    startMotor(LeftDownLift,100);
//    wait(1.6);//**
//    stopMotor(RightUpLift);
//    stopMotor(RightDownLift);
//    stopMotor(LeftDownLift);
//    stopMotor(LeftUpLift);
//
//    startMotor(RightUpLift,20);
//    startMotor(RightDownLift,20);
//    startMotor(LeftUpLift,20);
//    startMotor(LeftDownLift,20);
//    //The grabber will begin at the same time at a specific moment it will stop to fully extend out.
//    startMotor(Claw1,100);
//    startMotor(Claw2,100);
//    wait(0.5);
//    stopMotor(Claw1);
//    stopMotor(Claw2);
//
//    startMotor(Claw1,1);
//    startMotor(Claw2,1);
//    wait(0.5);
//    stopMotor(Claw1);
//    stopMotor(Claw2);
//    //The drive will stop to prepare for its next movement.
//    stopMotor(RightWheel);
//    stopMotor(LeftWheel);
//    //The drive will begin to retreat back for a **quarter of a second.
//    startMotor(RightWheel,-127);
//    startMotor(LeftWheel,-127);
//    wait(0.25);//**
//    stopMotor(RightWheel);
//    stopMotor(LeftWheel);
//    //The Lift will come down to prepare for the next movement.
//    stopMotor(RightUpLift);
//    stopMotor(RightDownLift);
//    stopMotor(LeftUpLift);
//    stopMotor(LeftDownLift);
//    //The drive will turn to the right preparing to grab onto the cube
//    startMotor(RightWheel,127);
//    startMotor(LeftWheel,-127);
//    wait(0.75);
//    stopMotor(RightWheel);
//    stopMotor(LeftWheel);
//
//    startMotor(RightWheel,127);
//    startMotor(LeftWheel,127);
//    wait(1);
//    stopMotor(RightWheel);
//    stopMotor(LeftWheel);
//
//		********************************************************
//		**THIS AUTON IS INCREDIBLY OUTDATED IT WAS FOR SKYRISE**
//		********************************************************
//----------------------------------------------------------------------------------------------------------------------------------------*/



void DonR() //1st auton. UNTESTED// by non-other than Efrain
// IM GOING TO GO CRAZY WITH MY AUTON ONCE I'M DONE WITH EVERYTHING ELSE!
// IM TALKING CALCULUS CRAZY I KNOW HOW TO USE FLOATS, INTEGRALS, PROPORTIONS AND DERIVATIVES.
{

}

// I really want you to make a sexy auton I believe in you bb.
// POINTS SCORED:
//
void Dave()
{	//Write auton here
	// startMotor(RightFront,100)
	// startMotor(RightRear,100)
	//

}


// Daniel this should be your auton if you choose to make one I'll leave this here until the end of my life.
// This should be kickass or I will be DISAPPOINTED!!!!!!... I believe in you *Squeak*
// POINTS SCORED:
//
void Daniel()
{	//Write auton here

}

void Ocean_Man()// I dunno man just don't use it, its a secret weapon i swear
{

}

// I still believe you can be a great programmer since the beginning
// POINTS SCORED:
//
void Michelle()//OMG I made Michelle her own auton section!
{	//Write auton here, let me get you started 
	// startMotor(RightRear,100);
	// startMotor(LeftRear,100);
	// wait(1) // In Seconds
	// stopMotor(RightRear)
	// stopMotor(LeftRear)
	//^^^^^^^^^^^^^^^^^^^^^^^^ Drives foreward I hope that helps !!!

}


///////////////////
//---------------//
// User Function //
//---------------//
///////////////////

void LiftUp ()
{
	motor[LeftLifts] = FULL;
	motor[RightLifts] = FULL;

}

void LiftDown ()
{
	motor[LeftLifts] = -FULL;
	motor[RightLifts] = -FULL;

}
void ClawUp ()
{
	motor[Claw1] = FULL;
	motor[Claw2] = FULL;
}
void ClawDown ()
{
	motor[Claw1] = -FULL;
	motor[Claw2] = -FULL;
}

/*************************************/
///////////////////////////////////////
//----------HYBRID FUNCTIONS---------//
// These void values will go in both //
// auton and the driver control. pls //
// don't get too crazy.              //
///////////////////////////////////////
/*************************************/
void HighHang ()// THE BICEP CURL
{
	if(vexRT[Btn8U] ==1)
	{
		LiftAll();
		wait(1.5);
		stopLift();
		dropLiftFullSpeed();
	}
}
/*------------------------------------------------------------------------------------------------/
///////////////////////////////////////////////////////////////////////////////////////////////////
Alright time for the real time, this is most important part of this robot if you, Dave or Daniel,
decide to put anything in the skills section make sure you use the whole 1 minute of it.
And be sure to reference your voids that were in the auton sections and to do that is easy
Just type your name then follow up with a "();" and it should be ready for your program.
GOOD LUCK. 
//////////////////////////////////////////////////////////////////////////////////////////////////
------------------------------------------------------------------------------------------------*/
void skills()// Please make this as accurate as possible and don't touch it if you aren't Efrain.
{
	Deploy();

}


task autonomous()// Efrain is open to suggestions it really helps me please.
{
  Deploy();

  AutonomousCodePlaceholderForTesting();
}


//This is where we begin driver control
task usercontrol()
{


  while (true)
  {

  	{
  	motor[LeftRear] = vexRT(LEFT);
   	motor[LeftFront] = vexRT(LEFT);
   	motor[RightRear] = vexRT(RIGHT);
   	motor[RightFront] = vexRT(RIGHT);
   	}
   	if(vexRT[Btn6U] ==1)
	{
		LiftUp();
	}
	else if(vexRT[Btn6D] ==1)
	{
		LiftDown();
	}
	else
	{
		motor[LeftLifts] = CONTROL;
		motor[RightLifts] = CONTROL;
	}

	if(vexRT[Btn5U] ==1);
	{
		ClawUp ();
	}

	else if(vexRT[Btn5D] ==1)
	{
		ClawDown ();
	}
	
	else
	{
		motor[Claw1] = CONTROL;
		motor[Claw2} = CONTROL;
	}

	HighHang();





  }

}
